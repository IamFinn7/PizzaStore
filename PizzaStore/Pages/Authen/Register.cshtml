@page
@model PizzaStore.Pages.Authen.RegisterModel
@{
    ViewData["Title"] = "Pizza Register";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="~/css/register.css"/>
    <link rel="stylesheet" href="https://unpkg.com/boxicons@latest/css/boxicons.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@100;200;300;400;500;600;700&display=swap" rel="stylesheet">
</head>
<body>

    <section>
        <div class="register-container">
            <div class="register-box" style="margin-bottom: 10px">
                <h2>Register</h2>
                 <form method="post">
                    <div class="register-input-group">
                        <label asp-for="Account.UserName"></label>
                        <input asp-for="Account.UserName" required />
                        <span asp-validation-for="Account.UserName"></span>
                    </div>
                    <div class="register-input-group">
                        <label asp-for="Account.FullName"></label>
                        <input asp-for="Account.FullName" required />
                        <span asp-validation-for="Account.FullName"></span>
                    </div>
                    <div class="register-input-group">
                        <label asp-for="Account.Password"></label>
                        <input asp-for="Account.Password" type="password" required />
                        <span asp-validation-for="Account.Password"></span>
                    </div>
                    <div class="register-input-group">
                        <label for="ConfirmPassword">Confirm Password</label>
                        <input name="ConfirmPassword" type="password" required />
                        <span class="text-danger"></span>
                    </div>
                    
                    <button type="submit" class="btn">Register</button>
                </form>
                <p class="register-link">
                    Already have an account? <a asp-area="" asp-page="/Authen/Login">Login here</a>
                </p>
            </div>
        </div>
    </section>

    @section Scripts {
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }
    }

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const usernameInput = document.querySelector('input[name="Account.UserName"]');
            const passwordInput = document.querySelector('input[name="Account.Password"]');
            const confirmPasswordInput = document.querySelector('input[name="ConfirmPassword"]');
            const registerButton = document.querySelector('button[type="submit"]');

            // Function to check if all required fields are filled
            function checkFields() {
                if (usernameInput.value && passwordInput.value && confirmPasswordInput.value) {
                    registerButton.disabled = false;
                } else {
                    registerButton.disabled = true;
                }
            }

            // Add event listeners to all input fields
            usernameInput.addEventListener('input', checkFields);
            passwordInput.addEventListener('input', checkFields);
            confirmPasswordInput.addEventListener('input', checkFields);

            const usernameWarning = document.createElement('span');
            usernameInput.parentNode.appendChild(usernameWarning);
            let isUsernameValid = true;

            usernameInput.addEventListener('blur', function () {
                const username = usernameInput.value;

                if (username) {
                    fetch(`/Authen/Register?handler=CheckUserName&username=${username}`)
                        .then(response => response.json())
                        .then(data => {
                            if (!data) {
                                usernameWarning.textContent = `Username ${username} already exists.`;
                                usernameWarning.style.color = 'red';
                                usernameWarning.style.fontSize = '14px';
                                isUsernameValid = false;
                            } else {
                                usernameWarning.textContent = '';
                                isUsernameValid = true;
                            }
                        })
                        .catch(error => console.error('Error:', error));
                } else {
                    usernameWarning.textContent = '';
                    isUsernameValid = true;
                }
            });

            const form = document.querySelector('form');
            form.addEventListener('submit', function (event) {
                const password = passwordInput.value;
                const confirmPassword = confirmPasswordInput.value;

                // Ensure that the checkFields function has validated the fields
                checkFields();

                if (!isUsernameValid) {
                    event.preventDefault();
                    alert("Account already exists.");
                    return;
                }

                if (password !== confirmPassword) {
                    event.preventDefault();
                    alert("Passwords do not match. Please check again.");
                } else if (usernameInput.value === '' || passwordInput.value === '' || confirmPasswordInput.value === '') {
                    event.preventDefault();
                    alert("Please fill in all required fields.");
                } else {
                    alert("Account created successfully!");

                    setTimeout(() => {
                        form.submit();
                    }, 1000);
                }
            });
        });
    </script>


</body>
</html>
